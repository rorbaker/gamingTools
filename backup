from typing import Counter
import modules.dice as dice
import modules.coreRules as coreRules
import modules.statsGenerators as statsGenerators

import pprint as pp

stats_templates = {
    'stats_template_rogue' : {'Endurance': 50,'Dexterity': 80,'Reflexes': 80,'Intelligence': 50}
    , 'stats_template_warrior' : {'Strength': 75,'Endurance': 50,'Dexterity': 30,'Constitution': 75}
    , 'stats_template_mage' : {'Intelligence': 90,'Essence': 75,'Willpower': 50}
    , 'stats_template_cleric' : {'Empathy': 75,'Willpower': 75,'Constitution': 50,'Intelligence': 30}
    , 'stats_template_psioncis' : {'Endurance': 75,'Empathy': 75,'Intelligence': 50}
}
 
use_templates = {key: value for key, value in stats_templates.items() if dice.get_simple_result(1, 10) < 4}


stat_order = [dice.get_avg_result( 1, 100, False) for c in range(10)]
order_stats =dict(zip(coreRules.stat_alpha_order, stat_order))

order_stats =dict( Counter(order_stats) + Counter(template_mods) )

pp.pprint(order_stats)

order_stats= sorted(order_stats.items(), key=lambda x:x[1], reverse=True)
pp.pprint(order_stats)

raw_stats = statsGenerators.generate_avg_stats(10, 12, 40, 50)
print(f"stats total: {sum(raw_stats)}")


final_stats = dict([(k, s) for (k, v), s in zip(order_stats, raw_stats)])


final_display = [(s, final_stats[s]) for s in coreRules.stat_display_order ]

pp.pprint(final_display)

pp.pprint(use_templates.keys())


